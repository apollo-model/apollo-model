type Category @model {
  id: ObjectID! @id @unique @db(name: "_id")
  title: String!
  tags: [String!]!
  items: [Item] @extRelation(storeField: "categoryId")
}

type Item @model {
  id: ObjectID! @id @unique @db(name: "_id")
  title: String!
  color: String
  description: Description
  category: Category! @relation
  labels: [Label!]! @relation
  location: GeoJSONPoint
  embCategory: EmbCategory
  embCategoryArr: [EmbCategory]
  embCategoryReq: EmbCategory!
  moderatedBy: AdminUser @relation
  owner: User
  ownerRel: User @relation
  ownerRelArr: [User]! @relation
}

type Label @model {
  id: ObjectID! @id @unique @db(name: "_id")
  title: String!
}

type Description {
  full: String
  short: String
  location: GeoJSONPoint
  size: Size
}

type Size {
  width: Float
  height: Float
}

type EmbCategory {
  id: Int!
  title: String!
  subcat: EmbCategory
  subcategories: [EmbCategory]
}

interface User @inherit @model @discriminator(value: "_type") {
  id: ObjectID! @id @unique @db(name: "_id")
  username: String! @unique
}

type AdminUser implements User @discriminator(value: "AdminUser") {
  role: String
}

type CustomerUser implements User @discriminator(value: "CustomerUser") {
  firstName: String
  lastName: String
}
